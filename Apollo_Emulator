#!/bin/bash

# --- Instalador Oficial do ApolloEmu ---
#
# Versão Final e Otimizada para ser alojada no GitHub.
# Este script instala um ambiente Linux completo, aplica a marca ApolloEmu,
# e configura-o com os melhores componentes para performance.

# --- Configuração Inicial ---
APOLLO_ROOTFS_DIR="$PREFIX/var/lib/proot-distro/installed-rootfs/ubuntu"

clear
echo "#####################################################"
echo "###                                               ###"
echo "###           Bem-vindo ao ApolloEmu              ###"
echo "###                                               ###"
echo "#####################################################"
echo
echo "Este instalador irá configurar um ambiente de emulação de alta performance."
read -p "Deseja continuar? (s/n) " choice
if [ "$choice" != "s" ]; then echo "Instalação cancelada."; exit 0; fi

# --- FASE 1: Preparação do Ambiente Termux ---
echo -e "\n[FASE 1/4] A preparar as dependências do Termux..."
pkg update -y && pkg upgrade -y > /dev/null
pkg install -y git curl proot-distro pulseaudio wget x11-repo > /dev/null
pkg update > /dev/null
pkg install -y termux-x11-nightly > /dev/null
echo "Dependências preparadas!"

# --- FASE 2: Instalação da Distro Base (Ubuntu) ---
echo -e "\n[FASE 2/4] A instalar o sistema operativo base do ApolloEmu..."
if [ ! -d "$APOLLO_ROOTFS_DIR" ]; then
    proot-distro install ubuntu
else
    echo "O sistema base já está instalado."
fi
echo "Sistema base pronto!"

# --- FASE 3: Instalação e Configuração dos Componentes ---
echo -e "\n[FASE 3/4] A instalar e otimizar os componentes do emulador..."

# Comandos a serem executados dentro do ambiente Ubuntu
cat <<'EOF' > ~/apollo-setup-commands.sh
#!/bin/bash
export DEBIAN_FRONTEND=noninteractive
apt-get update && apt-get upgrade -y
apt-get install -y xfce4 xfce4-session thunar dbus-x11 xorg nano wget gpg pulseaudio mesa-vulkan-drivers winetricks

# Instalação do Box64
wget https://ryanfortuin.github.io/box64-debs/box64.list -O /etc/apt/sources.list.d/box64.list
wget -qO- https://ryanfortuin.github.io/box64-debs/KEY.gpg | gpg --dearmor -o /etc/apt/trusted.gpg.d/box64-debs.gpg
dpkg --add-architecture i386 && apt-get update
apt-get install -y box64-debian wine

# Instalação do Proton-GE (Melhoria do ApolloEmu)
PROTON_API_URL="https://api.github.com/repos/Cachou/Proton-GE-unofficial-aarch64/releases/latest"
PROTON_DOWNLOAD_URL=$(curl -s "$PROTON_API_URL" | grep "browser_download_url.*\.tar.gz" | cut -d '"' -f 4)
if [ -n "$PROTON_DOWNLOAD_URL" ]; then
    echo "A instalar a versão mais recente do Proton-GE..."
    # Descarrega e extrai para /opt, um diretório comum para software opcional
    wget -q --show-progress "$PROTON_DOWNLOAD_URL" -O "/opt/$(basename $PROTON_DOWNLOAD_URL)"
    tar -xzf "/opt/$(basename $PROTON_DOWNLOAD_URL)" -C "/opt/"
fi

# Configuração do Wine e DXVK
export WINEPREFIX=~/.wine64; export DISPLAY=:0;
winecfg -v win10 > /dev/null 2>&1
winetricks -q dxvk
EOF

# Executa o script de configuração dentro do Ubuntu
proot-distro login ubuntu -- bash -c "bash ~/apollo-setup-commands.sh"
# Limpa o ficheiro temporário
rm ~/apollo-setup-commands.sh
echo "Componentes instalados e otimizados!"

# --- FASE 4: Criação dos Comandos Finais ---
echo -e "\n[FASE 4/4] A criar os comandos de gestão do ApolloEmu..."

# Comando de Gestão 'apollo'
cat <<'EOF' > $PREFIX/bin/apollo
#!/bin/bash
echo "Gestor ApolloEmu"
echo "A entrar no terminal do sistema..."
proot-distro login ubuntu
EOF

# Lançador Gráfico 'start-apolloemu'
cat <<'EOF' > $PREFIX/bin/start-apolloemu
#!/bin/bash
# Verifica se o "monitor" (Termux:X11) está a correr
if [ ! -S "$PREFIX/tmp/.X11-unix/X0" ]; then
    echo "ERRO: A aplicação Termux:X11 não parece estar a correr."
    echo "Por favor, abra-a e tente novamente."
    exit 1
fi

echo "A iniciar o Ambiente de Trabalho do ApolloEmu..."
# Prepara o ambiente
xhost + > /dev/null
pulseaudio --start --load="module-native-protocol-tcp auth-ip-acl=127.0.0.1 auth-anonymous=1" --exit-idle-time=-1 > /dev/null 2>&1

# Comando de execução com todos os tweaks de performance injetados como variáveis de ambiente
COMMAND='
# --- Variáveis de Ambiente do ApolloEmu para Máximo Desempenho ---

# Define o ecrã e o servidor de áudio
export DISPLAY=:0;
export PULSE_SERVER=127.0.0.1;

# Tweaks para o driver Mesa (Turnip/Zink)
export MESA_VK_WSI_PRESENT_MODE=0;
export vblank_mode=0;
export MESA_EXTENSION_OVERRIDE="-GL_EXT_buffer_storage -GL_ARB_buffer_storage";
export GALLIUM_DRIVER=zink; # Força o uso do Zink (OpenGL sobre Vulkan)
export TU_DEBUG=noconform;  # Tweak para o driver Turnip (Adreno)

# Tweaks para o Box64
export BOX64_DYNAREC_BIGBLOCK=2;

# Tweaks para o DXVK
export DXVK_ASYNC=1; # Reduz "stuttering"

# Tweak geral
export MESA_GL_THREAD=true;

# Remove o debug do Wine para um pouco mais de performance
export WINEDEBUG=-all;

# Inicia a sessão de trabalho
dbus-launch --exit-with-session xfce4-session
'

# Executa o comando dentro do ambiente Ubuntu
proot-distro login ubuntu --shared-tmp -- /bin/bash -c "$COMMAND"
EOF

# Dá permissão de execução aos novos comandos
chmod +x $PREFIX/bin/apollo $PREFIX/bin/start-apolloemu

# --- CONCLUSÃO ---
echo -e "\n\n#############################################"
echo "###       O SEU APOLLOEMU ESTÁ PRONTO!        ###"
echo "#############################################"
echo "\nFeche e reabra o Termux para garantir que os novos comandos são reconhecidos."
echo "\nCOMO JOGAR:"
echo "1. Abra a aplicação Termux:X11 (dê-lhe permissão de bateria 'Irrestrito')."
echo "2. No Termux, execute o comando: start-apolloemu"

